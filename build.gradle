plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
	id 'project-report'
	id 'jacoco'
}

group = 'com.sideproject'
//version = '0.0.1-SNAPSHOT'
archivesBaseName = 'codemoim_application'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.7"
	//reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
//	gradle.taskGraph.beforeTask { Task task ->
//		if(task.name == "test"){
//			println "========================== Gradle Log ==============================="
//			println "Are the test cycles being performed during the build?: ${tasks.getByName("assemble").state.executed}"
//			println "====================================================================="
//
//			def isBuild = tasks.getByName("assemble").state.executed
//
//			switch(isBuild) {
//				case true:
//					doFirst {
//						systemProperty('spring.profiles.active','prod')
//					}
//					break
//				case false:
//					doFirst {
//						systemProperty('spring.profiles.active','test')
//					}
//					break
//			}
//		}
//	}

	doFirst {
		systemProperty('spring.profiles.active','test')
	}

	useJUnitPlatform()

	//finalizedBy("jacocoTestReport")
}

jacocoTestReport {
	reports {
		html.required.set(true)
		xml.required.set(false)
		csv.required.set(false)
	}

	//finalizedBy("jacocoTestCoverageVerification")
}

jacocoTestCoverageVerification {
	def Qdomains = []

	for (qPattern in "*.QA".."*.QZ") {
		Qdomains.add(qPattern + "*")
	}

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			// includes = []

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			excludes = [] + Qdomains
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
	implementation 'io.awspring.cloud:spring-cloud-starter-aws'
	implementation 'io.awspring.cloud:spring-cloud-starter-aws-parameter-store-config'
	//implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.0'
	implementation 'com.querydsl:querydsl-jpa'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
	implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
	implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.1'
	implementation group: 'org.hibernate.search', name: 'hibernate-search-mapper-orm', version: '6.0.7.Final'
	implementation group: 'org.hibernate.search', name: 'hibernate-search-backend-lucene', version: '6.0.7.Final'
	implementation group: 'org.apache.lucene', name: 'lucene-analyzers-nori', version: '8.11.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.16.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.16.0'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	//runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	//compile fileTree(dir: 'libs', include: ['*.jar'])
	//compile files('libs/arirang-morph-1.1.5.jar')
	//compile files('libs/arirang.lucene-analyzer-7.2.1.1.jar')
}

ext {
	set('springCloudVersion', "2020.0.3")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:2.3.1"
	}
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}